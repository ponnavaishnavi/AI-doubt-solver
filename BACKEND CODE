from flask import Flask, request, jsonify
from flask_cors import CORS
import openai
import pytesseract
from PIL import Image
import os
from dotenv import load_dotenv

# Load API key from .env file
load_dotenv()

app = Flask(__name__)
CORS(app)

# Set your OpenAI API key
openai.api_key = os.getenv("OPENAI_API_KEY")

# Create uploads folder if not exists
if not os.path.exists("uploads"):
    os.makedirs("uploads")


@app.route('/')
def home():
    return jsonify({"message": "AI Doubt Solver Backend Running âœ…"})


@app.route('/solve_text', methods=['POST'])
def solve_text():
    data = request.get_json()
    question = data.get("question")

    if not question:
        return jsonify({"error": "No question provided"}), 400

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a helpful AI tutor."},
                {"role": "user", "content": question}
            ],
            max_tokens=300,
            temperature=0.7
        )

        answer = response["choices"][0]["message"]["content"]
        return jsonify({"answer": answer})

    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/solve_image', methods=['POST'])
def solve_image():
    if 'image' not in request.files:
        return jsonify({"error": "No image file uploaded"}), 400

    image = request.files['image']
    image_path = os.path.join("uploads", image.filename)
    image.save(image_path)

    try:
        # Extract text using OCR
        extracted_text = pytesseract.image_to_string(Image.open(image_path))

        # Ask AI to solve based on extracted text
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a helpful AI tutor."},
                {"role": "user", "content": f"Solve this question: {extracted_text}"}
            ],
            max_tokens=300,
            temperature=0.7
        )

        answer = response["choices"][0]["message"]["content"]

        return jsonify({"extracted_text": extracted_text, "answer": answer})

    except Exception as e:
        return jsonify({"error": str(e)}), 500
    finally:
        os.remove(image_path)


if __name__ == '__main__':
    app.run(debug=True)
